package sort281122;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
// https://www.scaler.com/academy/mentee-dashboard/class/40890/homework/problems/32021/hints?navref=cl_pb_nv_tb

public class TensDigitSorting{

	 	public int[] solve(int[] A) {
	 		ArrayList<Integer> ar = new ArrayList<Integer>();
	 		for(int i=0; i<A.length; i++) {
	 			ar.add(A[i]);
	 		}
	 		for(int i=0; i<A.length; i++) System.out.println(A[i] + " ");
			System.out.println();
	 		Collections.sort(ar, (a,b)->{
	 			System.out.println(a);
	 			int valA = (a/10)%10;
	 			int valB = (b/10)%10;
	 			if(valA == valB) return b-a;
	 			else return valA-valB;
	 		});
	 		int[] B = new int[ar.size()];
	 		for(int i=0; i<B.length; i++) B[i] = ar.get(i);
	 		return B;
	    }
	 	public ArrayList<Integer> solveScalerSol(ArrayList<Integer> A) {
	        Collections.sort(A, new Comparator< Integer >(){
	            @Override
	            public int compare(Integer val1, Integer val2) {
	                Integer tens_digit1 = (val1 / 10 ) % 10;
	                Integer tens_digit2 = (val2 / 10 ) % 10;
	                if (tens_digit1 == tens_digit2){
	                    return val2 - val1;
	            	}
	                return tens_digit1 - tens_digit2;
	            }    
	        });
	        return A;
	    }
	    public ArrayList<Integer> solve(ArrayList<Integer> A) {

	        Collections.sort(A, (a,b)->{
	            int tens_place1 = (a/10)%10;
	            int tens_place2 = (b/10)%10;
	            if(tens_place1 == tens_place2) return b-a;
	            else return tens_place1 - tens_place2;
	        });

	        return A;
	    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		TensDigitSorting tds = new TensDigitSorting();
		int[] A = {15, 11, 7, 19};
		int[] B = {2, 24, 22, 19};
		//int[] C = tds.solve(A); // 7, 19, 15, 11
		//int[] D = tds.solve(B); // 2, 19, 24, 22
		int[] E = {7, 28, 26, 36, 63, 63, 77, 87, 93 };
		//int[] F = tds.solve(E);
		int[] G = {652, 495, 108, 466, 239, 482, 709, 168, 189, 55, 443, 1, 979, 730, 455, 388, 389, 956, 661, 427, 459, 416, 472, 205, 406, 255, 805, 266, 287, 653, 211, 122, 249, 482, 681, 422, 298, 249, 16, 901, 462, 428, 181, 529, 28, 942, 937, 527, 559, 319, 921, 995, 782, 532, 53, 713, 244, 845, 165, 973, 280, 86, 263, 604, 639, 454, 3, 465, 301, 842, 568, 385, 896, 659, 451, 543, 669, 340, 471, 825, 480, 445, 336, 713, 585, 131, 831, 228, 514, 661, 273, 15, 90, 432, 8, 981, 364, 917, 872, 762, 281, 910, 563, 811, 130, 596, 542, 988, 15, 148, 194, 657, 642, 749, 116, 741, 356, 875, 365, 390, 704, 648, 410, 278, 299, 910, 733, 772, 251, 317, 530, 313, 996, 147, 851, 124, 772, 912, 77, 326, 208, 806, 817, 215, 421, 399, 59, 887, 656, 830, 774, 69, 806, 980, 143, 460, 77, 549, 782, 105, 321, 585, 744, 870, 632, 475, 679, 395, 966, 973, 832, 711, 642, 634, 60, 235, 311, 467, 688, 536, 516, 299, 149, 547, 149, 547, 688, 960, 703, 175, 123, 740, 112, 134, 906, 690, 844, 94, 7, 543, 41, 501, 799, 999, 396, 985, 587, 445, 562, 810, 880, 350, 625, 259, 887, 311, 27, 620, 669, 691, 674, 514, 436, 894, 534, 254, 553, 804, 721, 778, 324, 363, 348, 55, 643, 532, 879, 642, 199, 614, 709, 130, 621, 411, 389, 340, 174, 698, 778, 631, 711, 995, 772, 417, 778, 478, 237, 296, 244, 828, 237, 729, 21, 756, 495, 788, 203, 312, 106, 629, 71, 989, 160, 541, 37, 607, 394, 288, 49, 922, 434, 757, 749, 562, 983, 721, 172, 52, 837, 332, 427, 187, 954, 282, 330, 36, 226, 195, 903, 466, 53, 779, 163, 10, 436, 323, 659, 640, 439, 54, 832, 945, 929, 341, 191, 687, 874, 308, 114, 336, 100, 138, 326, 935, 367, 309, 259, 146, 942, 980, 727, 826, 128, 843, 867, 502, 135, 594, 516, 272, 436, 518, 475, 174, 729, 599, 462, 954, 533, 352, 613, 451, 124, 787, 309, 602, 37, 506, 1, 438, 714, 687, 884, 152, 771, 349, 448, 152, 451, 756, 146, 494, 178, 889, 67, 569, 545, 979, 720, 532, 473, 424, 419, 500, 124, 910, 689, 979, 530, 546, 298, 360, 214, 996, 780, 189, 831, 81, 592, 832, 616, 712, 44, 986, 295, 430, 23, 595, 481, 282, 783, 732, 869, 425, 430, 595, 477, 555, 361, 91, 488, 252, 976, 689, 363, 980, 177, 424, 555, 935, 782, 918, 924, 430, 218, 757, 901, 165, 687, 475, 850, 515, 499, 738, 873, 101, 294, 745, 933, 514, 861, 289, 791, 456, 115, 904, 463, 214, 499, 553, 255, 872, 463, 987, 161, 359, 20, 686, 356, 574, 355, 609, 547, 486, 730, 982, 309, 226, 841, 852, 102, 324, 518, 276, 725, 47, 801, 749, 36, 962, 144, 193, 636, 227, 180, 797, 230, 602, 771, 845, 994, 426, 180, 261, 996, 571, 262, 881, 282, 259, 657, 958, 47, 136, 595, 455, 60, 911, 44, 825, 842, 169, 858, 279, 88, 504, 246, 382, 283, 383, 630, 26, 113, 951, 713, 632, 13, 107, 230, 354, 351, 437, 293, 758, 81, 998, 972, 799, 762, 770, 787, 146, 863, 377, 784, 571, 117, 648, 852, 518, 993, 190, 429, 638, 864, 351, 554, 993, 87, 429, 10, 953, 116, 42, 589, 125, 122, 38, 57, 398, 250, 671, 382, 626, 261, 380, 563, 477, 626, 690, 727, 987, 166, 503, 88, 743, 327, 538, 256, 416, 649, 801, 138, 398, 97, 232, 498, 169, 900, 777, 18, 91, 545, 655, 14, 33, 635, 282, 553, 381, 432, 550, 101, 247, 164, 747, 304, 431, 671, 246, 233, 549, 979, 199, 703, 122, 359, 514, 522, 620, 774, 638, 800, 310, 473, 32, 402, 557, 681, 297, 996, 988, 22, 532, 704, 849, 691, 417, 828, 398, 223, 245, 783, 225, 237, 704, 624, 164, 845, 973, 527, 613, 705, 61, 762, 799, 745, 468, 874, 832, 447, 187, 59, 809, 60, 196, 599, 225, 705, 938, 812, 634, 623, 662, 689, 514, 847, 171, 237, 44, 515, 851, 816, 637, 675, 927, 320, 631, 369, 499, 486, 113, 46, 279, 374, 516, 810, 727, 459, 88, 648, 724, 464, 133, 959, 842, 672, 955, 586, 88, 39, 58, 593, 594, 494, 946, 694, 906, 651, 429, 937, 915, 63, 72, 917, 837, 118, 222, 832, 788, 138, 364, 271, 897, 961, 846, 807, 847, 602, 193, 157, 31, 780, 463, 600, 317, 584, 822, 609, 776, 946, 241, 954, 94, 259, 29, 396, 77, 90, 446, 831, 379, 94, 479, 870, 280, 278, 77, 360, 159, 761, 997, 929, 761, 6, 290, 638, 921, 78, 280, 21, 800, 197, 555, 835, 939, 300, 569, 987, 96, 50, 268, 886, 133};
		int[] H = tds.solve(G);
		for(int i=0; i<G.length; i++) System.out.println(G[i] + " ");
		System.out.println();

	}

}
